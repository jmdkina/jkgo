package jkparsedoc

import (
	"errors"
	"os"
)

func generateDirUpperPrefixString(prespace int) string {
	prestr := ""
	for i := 0; i < prespace; i++ {
		prestr += "../"
	}
	return prestr
}

//
// Generate Header of html and write to the @fo
// @prespace mean how many upper to the resource of css and js
//
func generateHtmlHeader(fo *os.File, title string, prespace int) error {
	if fo == nil {
		return errors.New("No File Out Handle")
	}

	fo.WriteString("<!-- This file is generated by jkparsedoc -->\n")
	html_header := "<!DOCTYPE html>\n" +
		"<html lang='zh'>\n" +
		"<head>\n" +
		"\t<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>\n" +
		"\t<title>" + title + "</title>\n" +
		"\t<link rel='shortcut icon' href='/static/imgs/favicon.ico' />\n" +
		"\t<link rel='icon' href='/static/imgs/favicon.png' type='image/png'>\n" +
		"\t<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n" +
		"\t<meta name='description' content=''>\n" +
		"\t<meta name='author' content='jmdvirus'>\n" +
		"\t<!--[if lt IE 9]>\n" +
		"\t\t<script src='http://html5shim.googlecode.com/svn/trunk/html5.js'></script>\n" +
		"\t<![endif]-->\n" +
		"\n" +
		"\t<!-- bootstrap css -->\n" +
		"\t<link href='/static/css/bootstrap.min.css' rel='stylesheet'>\n" +
		"\t<link href='/static/css/bootstrap-theme.min.css' rel='stylesheet'>\n" +
		"</head>\n" +
		"<body>\n" +
		"<div class='container'>\n"
	fo.WriteString(html_header)

	return nil
}

//
// Generate Footer and write to the @fo
// @prespace mean how many upper to the resource of css and js
//
func generateHtmlFooter(fo *os.File, prespace int) error {
	if fo == nil {
		return errors.New("No File Out Handle")
	}

	html_end := "\n</div>\n" +
		"<!-- load js -->\n" +
		"<script type='text/javascript' src='/static/js/jquery.min.js'></script>\n" +
		"<script type='text/javascript' src='/static/js/bootstrap.min.js'></script>\n" +
		"<div class='text-center'><em><small>Jmdvirus@2015</small></em></div>" +
		"</body>\n<html>\n"
	fo.WriteString(html_end)
	fo.WriteString("<!-- End of the file -->\n")

	return nil
}

//
// Button to the index
// @prespace same with JKGenerateHtmlHeader
//
func generateHtmlALink(fo *os.File, prespace int, aname string) error {
	if fo == nil {
		return errors.New("No File Out Handel")
	}

	prestr := generateDirUpperPrefixString(prespace)

	a_str := "<a class='btn btn-primary btn-block' href='" + prestr + "index.html'>" + aname +
		"</a>\n"
	fo.WriteString(a_str)

	return nil
}

//
// Write Main comment to html file
//
func generateHtmlMainComment(fo *os.File, com string) error {
	if fo == nil {
		return errors.New("No File Out Handle")
	}

	com_str := "<p><pre>" + com + "</pre></p>\n"
	fo.WriteString(com_str)

	return nil
}

//
// Write define comment to html file
// First write comment @com and then the define value @value
//
func generateHtmlDefineComment(fo *os.File, com, value string) error {
	if fo == nil {
		return errors.New("No File Write Handle")
	}

	def_str := "<pre><em><small>" + com + "</small></em>" +
		value + "</pre>\n"
	fo.WriteString(def_str)

	return nil
}

//
// Envelope it, maybe someday need to change something
//
func generateHtmlString(fo *os.File, str string) error {
	if fo == nil {
		return errors.New("No File Write Handle")
	}

	str_str := str
	fo.WriteString(str_str + "\n")

	return nil
}
